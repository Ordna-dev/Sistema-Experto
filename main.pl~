:- prolog_load_context(directory, Dir), working_directory(_, Dir).

:- use_module(library(pce)).

:- dynamic
    ojos/1,
    pico/1,
    cuerpo/1,
    patas/1,
    tarsos/1,
    loras/1,
    alas/1,
    vientre/1,
    corona/1,
    espalda/1,
    habitat/1,
    alimentacion/1,
    ave/13.

% Función que se ejecuta al inicio del programa para cargar las aves
cargar_aves :-
    format('Iniciando la carga de aves desde el archivo...\n'),
    % Abre el archivo de la base de datos de aves en modo lectura
    open('AvesColomosPrueba.pl', read, Stream),
    % Llama a la función para leer y cargar las aves
    leer_aves(Stream),
    % Cierra el archivo
    format('Archivo de aves leido'),
    close(Stream).

% Función recursiva para leer el archivo de aves línea por línea
leer_aves(Stream) :-
    % Comprueba si hemos alcanzado el final del archivo
    at_end_of_stream(Stream),
    !,  % Si es así, termina la recursión con corte (!) para prevenir backtracking
    format('Fin del archivo alcanzado.\n').
leer_aves(Stream) :-
    % No hemos alcanzado el final, lee la siguiente línea
    read(Stream, Ave),
    % Asegúrate de que la línea leída es una cláusula válida
    (   is_ave(Ave)
    ->  % Si es una cláusula de ave, úsala para hacer un assertz
        assertz(Ave),
        format('Ave cargada: ~w\n', [Ave])
    ;   % Si no, ignora la línea
        true
    ),
    % Continúa con la siguiente línea
    leer_aves(Stream).

% Verifica si la cláusula leída corresponde a una definición de ave
is_ave(Ave) :-
    % Comprueba si Ave es una cláusula que comienza con ave(...)
    Ave =.. [ave|_].

%Ejecucion de la interfaz principal
start_gui :-
    % Carga las aves de la BD
    format('Iniciando la interfaz gráfica...\n'),
    cargar_aves,

    new(MiVentana, dialog('Identificador de Aves')),

    % Crear campos de texto para cada atributo relevante
    send(MiVentana, append, new(Ojos, text_item('ojos'))),
    send(MiVentana, append, new(Pico, text_item('pico'))),
    send(MiVentana, append, new(Cuerpo, text_item('cuerpo'))),
    send(MiVentana, append, new(Patas, text_item('patas'))),
    send(MiVentana, append, new(Tarsos, text_item('tarsos'))),

    % Los siguientes campos son opcionales, ya que no aparecen en todas las definiciones de aves
    send(MiVentana, append, new(Loras, text_item('loras'))), % Si existe el atributo loras
    send(MiVentana, append, new(Alas, text_item('alas'))), % Si existe el atributo alas
    send(MiVentana, append, new(Vientre, text_item('vientre'))), % Si existe el atributo vientre
    send(MiVentana, append, new(Corona, text_item('corona'))), % Si existe el atributo corona
    send(MiVentana, append, new(Espalda, text_item('espalda'))), % Si existe el atributo espalda

    % Campos para hábitat y alimentación
    send(MiVentana, append, new(Habitat, text_item('habitat'))),
    send(MiVentana, append, new(Alimentacion, text_item('alimentacion'))),

    % Crear botones
    % Botón para identificar ave
    send(MiVentana, append, button('Identificar', message(@prolog, identificar_ave,
    Ojos?selection, Pico?selection, Cuerpo?selection, Patas?selection, Tarsos?selection,
    Loras?selection, Alas?selection, Vientre?selection, Corona?selection, Espalda?selection,
    Habitat?selection, Alimentacion?selection))),

    % Botón para agregar ave
    send(MiVentana, append, button('Agregar ave', message(@prolog, gui_agregar_ave,
    Ojos?selection, Pico?selection, Cuerpo?selection, Patas?selection, Tarsos?selection,
    Loras?selection, Alas?selection, Vientre?selection, Corona?selection, Espalda?selection,
    Habitat?selection, Alimentacion?selection))),

    % Boton para mostrar todas las aves de la base de conocimientos
    send(MiVentana, append, button('Mostrar todas las aves', message(@prolog, mostrar_aves))),

    % Boton para salir de la interfaz
    send(MiVentana, append, button('Salir', message(MiVentana, destroy))),

    send(MiVentana, open).

% Se recogen los valores de las aves y su nombre
gui_agregar_ave(Ojos, Pico, Cuerpo, Patas, Tarsos, Loras, Alas, Vientre, Corona, Espalda, Habitat, Alimentacion) :-

    % Imprime los valores recibidos
    format('Recibido - Ojos: ~w, Pico: ~w, Cuerpo: ~w, Patas: ~w, Tarsos: ~w, Loras: ~w, Alas: ~w, Vientre: ~w, Corona: ~w, Espalda: ~w, Habitat: ~w, Alimentacion: ~w\n',
        [Ojos, Pico, Cuerpo, Patas, Tarsos, Loras, Alas, Vientre, Corona, Espalda, Habitat, Alimentacion]),

    new(Diag, dialog('Agregar nueva ave')),
    send(Diag, append, new(Nombre, text_item(nombre))),
    send(Diag, append, button('Aceptar', message(@prolog, nuevaAve,
        Nombre?selection, Ojos, Pico, Cuerpo, Patas, Tarsos, Loras, Alas, Vientre, Corona, Espalda, Habitat, Alimentacion, Diag))),
    send(Diag, open).

% Guardar el ave en la base de conocimientos y cerrar el diálogo
nuevaAve(NombreAve, Ojos, Pico, Cuerpo, Patas, Tarsos, Loras, Alas, Vientre, Corona, Espalda, Habitat, Alimentacion, Diag) :-

    % Realiza el assertz con los valores recolectados
    assertz(ave(NombreAve, Ojos, Pico, Cuerpo, Patas, Tarsos, Loras, Alas, Vientre, Corona, Espalda, Habitat, Alimentacion)),

    % Muestra el mensaje de confirmación
    send(@display, inform, 'La ave ha sido agregada en la base de datos'),

    % Cierra la ventana de diálogo después de agregar la ave
    send(Diag, destroy).

% Mostrar todas las aves en la base de conocimientos
mostrar_aves :-
    % Crear una ventana y un widget de label
    new(Dialogo, dialog('Aves Registradas')),
    new(T, label(texto, '')),
    send(T, font, font(times, roman, 12)),
    send(Dialogo, append, T),

    % Verificar si hay alguna ave en la base de conocimientos
    (   % Comprobar si existe al menos una definición de ave con 13 atributos
        ave(_, _, _, _, _, _, _, _, _, _, _, _, _)
    ->  % Usar forall/2 para iterar sobre las aves si existen
        forall(
            ave(Nombre, Ojos, Pico, Cuerpo, Patas, Tarsos, Loras, Alas, Vientre, Corona, Espalda, Habitat, Alimentacion),
            (   % Construir la cadena de texto para cada ave con separadores
                with_output_to(string(Str),
                    format('Ave: ~w\nOjos: ~w\nPico: ~w\nCuerpo: ~w\nPatas: ~w\nTarsos: ~w\nLoras: ~w\nAlas: ~w\nVientre: ~w\nCorona: ~w\nEspalda: ~w\nHabitat: ~w\nAlimentacion: ~w\n---------------------------------------\n',
                           [Nombre, Ojos, Pico, Cuerpo, Patas, Tarsos, Loras, Alas, Vientre, Corona, Espalda, Habitat, Alimentacion])),
                % Agregar la cadena de texto al label
                send(T, append, Str)
            )
        )
    ;   % En caso de que no haya aves, mostrar un mensaje
        send(T, value, 'No hay aves registradas en la base de conocimientos.')
    ),

    % Mostrar la ventana
    send(Dialogo, open).

