:- prolog_load_context(directory, Dir), working_directory(_, Dir).

:- dynamic
    ojos/1,
    garganta/1,
    loras/1,
    patas/1,
    alas/1,
    cabeza/1,
    cere/1,
    auriculares/1,
    corona/1,
    cobertoras_inferiores_cola/1,
    pico/1,
    cuerpo/1,
    vientre/1,
    pecho/1,
    zona_malar/1,
    cola/1,
    tarsos/1,
    espalda/1,
    come/1,
    ave/1.

archivo_aves('avesColomos.pl').
guardar :- archivo_aves(File), tell(File), listing(ave), told.
recuperar :- archivo_aves(File), exists_file(File), consult(File).

buscar :- 
    recuperar,
    eliminarUsuario,
    conocer,
    respuesta.

respuesta :-
    not(ave(_)),
    write("No encontramos tu ave."), nl,
    verificar, nl, nl,
    write("Te gustaria agregar esta nueva ave?"), nl, read(R),
    (R = no; nuevaAve, guardar).

respuesta :-
    ave(X),
    write("Tu ave es un(a): "), write(X), nl,
    verificar.

/* Modulo de explicacion */
predecir(ave(X), prueba(ave(X),
    Iojos,
    Igarganta,
    Iloras,
    Ipatas,
    Ialas,
    Icere,
    Ivientre,
    Icabeza,
    Ipecho,
    Iespalda,
    Iauriculares,
    Icobertoras_inferiores_cola,
    Icome,
    Icorona,
    Izona_malar,
    Itarsos,
    Icuerpo,
    Icola,
    Ipico
)) :- ave(X),
    predecir(ojos(_), Iojos),
    predecir(garganta(_), Igarganta),
    predecir(loras(_), Iloras),
    predecir(patas(_), Ipatas),
    predecir(alas(_), Ialas),
    predecir(come(_), Icome),
    predecir(vientre(_), Ivientre),
    predecir(cobertoras_inferiores_cola(_), Icobertoras_inferiores_cola),
    predecir(espalda(_), Iespalda),
    predecir(pecho(_), Ipecho),
    predecir(tarsos(_), Itarsos),
    predecir(auriculares(_), Iauriculares),
    predecir(corona(_), Icorona),
    predecir(pico(_), Ipico),
    predecir(zona_malar(_), Izona_malar),
    predecir(cuerpo(_), Icuerpo),
    predecir(cere(_),Icere),
    predecir(cola(_), Icola),
    predecir(cabeza(_), Icabeza).

predecir(loras(X), verificar(loras(X), hecho)) :- loras(X), not(loras(desconocido)).
predecir(loras(X), verificar(loras(X), no_definido)) :- not(loras(X)); loras(desconocido).

predecir(alas(X), verificar(alas(X), hecho)) :- alas(X), not(alas(desconocido)).
predecir(alas(X), verificar(alas(X), no_definido)) :- not(alas(X)); alas(desconocido).

predecir(cabeza(X), verificar(cabeza(X), hecho)) :- cabeza(X), not(cabeza(desconocido)).
predecir(cabeza(X), verificar(cabeza(X), no_definido)) :- not(cabeza(X)); cabeza(desconocido).

predecir(cere(X), verificar(cere(X), hecho)) :- cere(X), not(cere(desconocido)).
predecir(cere(X), verificar(cere(X), no_definido)) :- not(cere(X)); cere(desconocido).

predecir(ojos(X), verificar(ojos(X), hecho)) :- ojos(X), not(ojos(desconocido)).
predecir(ojos(X), verificar(ojos(X), no_definido)) :- not(ojos(X)); ojos(desconocido).

predecir(espalda(X), verificar(espalda(X), hecho)) :- espalda(X), not(espalda(desconocido)).
predecir(espalda(X), verificar(espalda(X), no_definido)) :- not(espalda(X)); espalda(desconocido).

predecir(cola(X), verificar(cola(X), hecho)) :- cola(X), not(cola(desconocido)).
predecir(cola(X), verificar(cola(X), no_definido)) :- not(cola(X)); cola(desconocido).

predecir(tarsos(X), verificar(tarsos(X), hecho)) :- tarsos(X), not(tarsos(desconocido)).
predecir(tarsos(X), verificar(tarsos(X), no_definido)) :- not(tarsos(X)); tarsos(desconocido).

predecir(garganta(X), verificar(garganta(X), hecho)) :- garganta(X), not(garganta(desconocido)).
predecir(garganta(X), verificar(garganta(X), no_definido)) :- not(garganta(X)); garganta(desconocido).

predecir(patas(X), verificar(patas(X), hecho)) :- patas(X), not(patas(desconocido)).
predecir(patas(X), verificar(patas(X), no_definido)) :- not(patas(X)); patas(desconocido).

predecir(pecho(X), verificar(pecho(X), hecho)) :- pecho(X), not(pecho(desconocido)).
predecir(pecho(X), verificar(pecho(X), no_definido)) :- not(pecho(X)); pecho(desconocido).

predecir(vientre(X), verificar(vientre(X), hecho)) :- vientre(X), not(vientre(desconocido)).
predecir(vientre(X), verificar(vientre(X), no_definido)) :- not(vientre(X)); vientre(desconocido).

predecir(auriculares(X), verificar(auriculares(X), hecho)) :- auriculares(X), not(auriculares(desconocido)).
predecir(auriculares(X), verificar(auriculares(X), no_definido)) :- not(auriculares(X)); auriculares(desconocido).

predecir(come(X), verificar(come(X), hecho)) :- come(X), not(come(desconocido)).
predecir(come(X), verificar(come(X), no_definido)) :- not(come(X)); come(desconocido).

predecir(zona_malar(X), verificar(zona_malar(X), hecho)) :- zona_malar(X), not(zona_malar(desconocido)).
predecir(zona_malar(X), verificar(zona_malar(X), no_definido)) :- not(zona_malar(X)); zona_malar(desconocido).

predecir(corona(X), verificar(corona(X), hecho)) :- corona(X), not(corona(desconocido)).
predecir(corona(X), verificar(corona(X), no_definido)) :- not(corona(X)); corona(desconocido).

predecir(cobertoras_inferiores_cola(X),verificar(cobertoras_inferiores_cola(X), hecho)) :-
    cobertoras_inferiores_cola(X), not(cobertoras_inferiores_cola(desconocido)).
predecir(cobertoras_inferiores_cola(X),verificar(cobertoras_inferiores_cola(X), no_definido)) :- 
    not(cobertoras_inferiores_cola(X)); cobertoras_inferiores_cola(desconocido).

predecir(pico(X), verificar(pico(X), hecho)) :- pico(X), not(pico(desconocido)).
predecir(pico(X), verificar(pico(X), no_definido)) :- not(pico(X)); pico(desconocido).

predecir(cuerpo(X), verificar(cuerpo(X), hecho)) :- cuerpo(X), not(cuerpo(desconocido)).
predecir(cuerpo(X), verificar(cuerpo(X), no_definido)) :- not(cuerpo(X)); cuerpo(desconocido).

conocer :-
    obtenerOjos,
    obtenerGarganta,
    obtenerLoras,
    obtenerPatas,
    obtenerAlas,
    obtenerCabeza,
    obtenerCere,
    obtenerAuriculares,
    obtenerCorona,
    obtenerCobertorasInferioresDeLaCola,
    obtenerPico,
    obtenerCuerpo,
    obtenerVientre,
    obtenerPecho,
    obtenerZonaMalar,
    obtenerCola,
    obtenerTarsos,
    obtenerEspalda,
    obtenerCome.

obtenerOjos :-
    write("¿Sabes el color de sus ojos? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X), 
    asserta(ojos(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl, read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(ojos(Z)); Y \= si)
    ).

obtenerGarganta :-
    write("¿Sabes el color de su garganta? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X), 
    asserta(garganta(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl, read(Y),
        (Y = si -> write("Escribe su otro color?"), nl, read(Z), asserta(garganta(Z)); Y \= si)
    ).
    
obtenerLoras :-
    write("¿Sabes el color de sus loras? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X), 
    asserta(loras(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl, read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(loras(Z)); Y \= si)
    ).
    
obtenerPatas :-
    write("¿Sabes el color de sus patas? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(patas(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(patas(Z)); Y \= si)
    ).
    
obtenerAlas :-
    write("¿Sabes el color de sus alas? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(alas(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(alas(Z)); Y \= si)
    ).
    
obtenerCabeza :-
    write("¿Sabes el color de su cabeza? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(cabeza(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(cabeza(Z)); Y \= si)
    ).
    
obtenerCere :-
    write("¿Sabes el color de su cere? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(cere(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(cere(Z)); Y \= si)
    ).
    
obtenerAuriculares :-
    write("¿Sabes el color de sus auriculares? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(auriculares(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(auriculares(Z)); Y \= si)
    ).
    
obtenerCorona :-
    write("¿Sabes el color de su corona? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(corona(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(corona(Z)); Y \= si)
    ).
    
obtenerCobertorasInferioresDeLaCola :-
    write("¿Sabes el color de sus cobertoras inferiores de la cola? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(cobertoras_inferiores_cola(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(cobertoras_inferiores_cola(Z)); Y \= si)
    ).

obtenerPico :-
    write("¿Sabes el color de su pico? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(pico(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(pico(Z)); Y \= si)
    ).

obtenerCuerpo :-
    write("¿Sabes el color de su cuerpo? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(cuerpo(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(cuerpo(Z)); Y \= si)
    ).

obtenerVientre :-
    write("¿Sabes el color de su vientre? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(vientre(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(vientre(Z)); Y \= si)
    ).

obtenerPecho :-
    write("¿Sabes el color de su pecho? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(pecho(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(pecho(Z)); Y \= si)
    ).

obtenerZonaMalar :-
    write("¿Sabes el color de su zona malar? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(zona_malar(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(zona_malar(Z)); Y \= si)
    ).

obtenerCola :-
    write("¿Sabes el color de su cola? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(cola(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(cola(Z)); Y \= si)
    ).

obtenerTarsos :-
    write("¿Sabes el color de sus tarsos? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(tarsos(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(tarsos(Z)); Y \= si)
    ).

obtenerEspalda :-
    write("¿Sabes el color de su espalda? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(espalda(X)),
    (
        X = desconocido; 
        write("¿Cuenta con algun otro color?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro color"), nl, read(Z), asserta(espalda(Z)); Y \= si)
    ).

obtenerCome :-
    write("¿Sabes de que se alimenta? Escribelo. Si desconoces escribe: 'desconocido'"), nl, read(X),
    asserta(come(X)),
    (
        X = desconocido; 
        write("¿Come algun otro alimento?"), nl,
        read(Y),
        (Y = si -> write("Escribe su otro alimento"), nl, read(Z), asserta(come(Z)); Y \= si)
    ).

/* Las pruebas que se muestran al usuario cuando se llega a una respuesta */
verificar :-
    verificarOjos,
    verificarGarganta,
    verificarLoras,
    verificarPatas,
    verificarAlas,
    verificarCabeza,
    verificarCere,
    verificarAuriculares,
    verificarCorona,
    verificarCobertorasInferiorasDeLaCola,
    verificarPico,
    verificarCuerpo,
    verificarVientre,
    verificarPecho,
    verificarZonaMalar,
    verificarCola,
    verificarTarsos,
    verificarEspalda,
    verificarCome.
    
verificarOjos :-
    predecir(ojos(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de los ojos no definido.");
        write("El color de los ojos del ave es: "), write(X)
    ).
    
verificarGarganta :-
    predecir(garganta(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de la garganta no definida.");
        write("El color de la garganta del ave es: "), write(X)
    ).

verificarLoras :-
    predecir(loras(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de las loras no definido.");
        write("El color de las loras del ave es: "), write(X)
    ).

verificarPatas :-
    predecir(patas(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de las patas no definido.");
        write("El color de las patas del ave es: "), write(X)
    ).

verificarAlas :-
    predecir(alas(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de las alas no definido.");
        write("El color de las alas del ave es: "), write(X)
    ).

verificarCabeza :-
    predecir(cabeza(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de la cabeza no definido.");
        write("El color de la cabeza del ave es: "), write(X)
    ).

verificarCere :-
    predecir(cere(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color del cere no definido.");
        write("El color del cere del ave es: "), write(X)
    ).

verificarAuriculares :-
    predecir(auriculares(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de los auriculares no definido.");
        write("El color de los auriculares del ave es: "), write(X)
    ).

verificarCorona :-
    predecir(corona(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de la corona no definido.");
        write("El color de la corona del ave es: "), write(X)
    ).

verificarCobertorasInferiorasDeLaCola :-
    predecir(cobertoras_inferiores_cola(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de las cobertoras inferiores de la cola no definido.");
        write("El color de las cobertoras inferiores de la cola del ave es: "), write(X)
    ).    

verificarPico :-
    predecir(pico(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color del pico no definido");
        write("El color del pico del ave es: "), write(X)
    ).

verificarCuerpo :-
    predecir(cuerpo(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color del cuerpo no definido");
        write("El color del cuerpo del ave es: "), write(X)
    ).

verificarVientre :-
    predecir(vientre(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color del vientre no definido");
        write("El color del vientre del ave es: "), write(X)
    ).

verificarPecho :-
    predecir(pecho(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color del pecho no definido");
        write("El color del pecho del ave es: "), write(X)
    ).

verificarZonaMalar :-
    predecir(zona_malar(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de la zona malar no definido");
        write("El color de la zona malar del ave es: "), write(X)
    ).

verificarCola :-
    predecir(cola(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de la cola no definido");
        write("El color de la cola del ave es: "), write(X)
    ).

verificarTarsos :-
    predecir(tarsos(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de los tarsos no definido");
        write("El color de los tarsos del ave es: "), write(X)
    ).

verificarEspalda :-
    predecir(espalda(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Color de la espalda no definido");
        write("El color de la espalda del ave es: "), write(X)
    ).

verificarCome :-
    predecir(come(X), verificar(_, B)), nl,
    (
        B = no_definido, write("Alimento del ave no definido");
        write("El ave se alimenta de: "), write(X)
    ).

/* Agrega una nueva ave con la descripcion que hay en memoria */
nuevaAve :-
    write("¿Cual es el nombre de esta nueva ave?"), nl, read(Nombre),
    ojos(Ojos), 
    garganta(Garganta), 
    loras(Loras),
    patas(Patas),
    alas(Alas),
    cabeza(Cabeza),
    cere(Cere),
    auriculares(Auriculares),
    corona(Corona),
    cobertoras_inferiores_cola(CobertorasInferioresCola),
    pico(Pico),
    cuerpo(Cuerpo),
    vientre(Vientre),
    pecho(Pecho),
    zona_malar(ZonaMalar),
    cola(Cola),
    tarsos(Tarsos),
    espalda(Espalda),
    come(Come),
    assertz((
        ave(Nombre) :- 
            ojos(Ojos), 
            garganta(Garganta), 
            loras(Loras),
            patas(Patas),
            alas(Alas),
            cabeza(Cabeza),
            cere(Cere),
            auriculares(Auriculares),
            corona(Corona),
            cobertoras_inferiores_cola(CobertorasInferioresCola),
            pico(Pico),
            cuerpo(Cuerpo),
            vientre(Vientre),
            pecho(Pecho),
            zona_malar(ZonaMalar),
            cola(Cola),
            tarsos(Tarsos),
            espalda(Espalda),
            come(Come)
        )).

eliminarUsuario :-
    retractall(ojos(_)), 
    retractall(garganta(_)), 
    retractall(loras(_)),
    retractall(patas(_)),
    retractall(alas(_)),
    retractall(cabeza(_)),
    retractall(cere(_)),
    retractall(auriculares(_)),
    retractall(corona(_)),
    retractall(cobertoras_inferiores_cola(_)),
    retractall(pico(_)),
    retractall(cuerpo(_)),
    retractall(vientre(_)),
    retractall(pecho(_)),
    retractall(zona_malar(_)),
    retractall(cola(_)),
    retractall(tarsos(_)),
    retractall(espalda(_)),
    retractall(come(_)).